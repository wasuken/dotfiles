(in-package :lem)

;; Key Bindings
(define-command split-3-window-horizontally () ()
  (let ((w-width (window-width)))
    (split-active-window-horizontally)
    (shrink-window-horizontally (- (window-width) (floor (/ w-width 3))))
    (other-window)
    (split-active-window-horizontally)
    (other-window)
    (other-window -2)))

(define-command back-window () ()
  (other-window -1))

(define-key *global-keymap* "C-x >" 'other-window)
(define-key *global-keymap* "C-x <" 'back-window)
(define-key *global-keymap* "M-i" 'delete-other-windows)
(define-key *global-keymap* "M-u" 'split-active-window-vertically)
(define-key *global-keymap* "M-U" 'split-3-window-horizontally)
(define-key *global-keymap* "M-z" 'query-replace)
(define-key *global-keymap* "C-x l" 'start-lisp-repl)
(define-key *global-keymap* "C-x u" 'undo)

(setf *auto-mode-alist*
      (nconc '((".lemrc$" . lem-paredit-mode:paredit-mode)) *auto-mode-alist*))
(setf *auto-mode-alist*
      (nconc '(("\\.lisp$" . lem-paredit-mode:paredit-mode)) *auto-mode-alist*))

(in-package :lem-lisp-mode)

(LINE-OFFSET (CURRENT-POINT) 1)
(MOVE-TO-COLUMN (CURRENT-POINT) 1)

(setf *auto-mode-alist*
      (nconc '((".lemrc$" . lisp-mode)) *auto-mode-alist*))
(setf *auto-mode-alist*
      (nconc '(("\\.lisp$" . lisp-mode)) *auto-mode-alist*))
